<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on irishlab.io</title>
    <link>http://localhost:1313/container/docker/</link>
    <description>Recent content in Docker on irishlab.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Oct 2019 15:26:15 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/container/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Homepage</title>
      <link>http://localhost:1313/container/docker/homepage/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:15 +0000</pubDate>
      <guid>http://localhost:1313/container/docker/homepage/</guid>
      <description>Homepage </description>
    </item>
    <item>
      <title>Nebula-Sync</title>
      <link>http://localhost:1313/container/docker/nebula-sync/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:15 +0000</pubDate>
      <guid>http://localhost:1313/container/docker/nebula-sync/</guid>
      <description>Nebula-Sync Create a new directory for Nebula Sync and navigate into it.&#xA;mkdir -p /opt/stacks/nebula-sync cd /opt/stacks/nebula-sync Create our compose file.&#xA;docker pull ghcr.io/lovelaze/nebula-sync:v0.10.0 # pre-load the container nano compose.yml Inside of our compose.yml paste:&#xA;--- name: nebula-sync services: nebula-sync: container_name: nebula-sync image: ghcr.io/lovelaze/nebula-sync:v0.10.0 restart: unless-stopped env_file: .env Create our .env with our variables.&#xA;Replace with your server IPs, passwords, timezone, and how frequently you want so run this sync job.</description>
    </item>
    <item>
      <title>Nebula-Sync</title>
      <link>http://localhost:1313/container/docker/traefik/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:15 +0000</pubDate>
      <guid>http://localhost:1313/container/docker/traefik/</guid>
      <description>Traefik ./traefik ├── data │ ├── acme.json │ ├── config.yml │ └── traefik.yml └── cf_api_token.txt └── docker-compose.yml Create a new directory for Traefik and navigate into it.&#xA;mkdir -p opt/stacks/traefik cd opt/stacks/traefik Create our compose file.&#xA;nano compose.yml Inside of our compose.yml paste:&#xA;version: &amp;#34;3.8&amp;#34; services: traefik: image: traefik:v3.0 container_name: traefik restart: unless-stopped security_opt: - no-new-privileges:true networks: - proxy ports: - 80:80 - 443:443 # - 443:443/tcp # Uncomment if you want HTTP3 # - 443:443/udp # Uncomment if you want HTTP3 environment: CF_DNS_API_TOKEN_FILE: /run/secrets/cf_api_token # note using _FILE for docker secrets # CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN} # if using .</description>
    </item>
    <item>
      <title>PeaNUT</title>
      <link>http://localhost:1313/container/docker/peanut/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:15 +0000</pubDate>
      <guid>http://localhost:1313/container/docker/peanut/</guid>
      <description>PeaNUT Create a new directory for PeaNUT and navigate into it.&#xA;mkdir -p /opt/stacks/peanut cd /opt/stacks/peanut nano compose.yml --- name: peanut services: peanut: container_name: peanut image: brandawg93/peanut:5.7.2 restart: unless-stopped volumes: - &amp;#34;./config:/config&amp;#34; ports: - 8080:8080 env_file: .env # This file is used to set environment variables for the PeaNUT Docker container. WEB_PORT=8080 WEB_USERNAME= &amp;#34;your-username-here&amp;#34; WEB_PASSWORD= &amp;#34;your-password-here&amp;#34; nano /opt/stacks/peanut/config/settings.yml NUT_SERVERS: - HOST: localhost PORT: 3493 USERNAME: user PASSWORD: pass INFLUX_HOST: &amp;#39;&amp;#39; INFLUX_TOKEN: &amp;#39;&amp;#39; INFLUX_ORG: &amp;#39;&amp;#39; INFLUX_BUCKET: &amp;#39;&amp;#39; INFLUX_INTERVAL: 10 </description>
    </item>
    <item>
      <title>Pi-Hole</title>
      <link>http://localhost:1313/container/docker/pihole/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:15 +0000</pubDate>
      <guid>http://localhost:1313/container/docker/pihole/</guid>
      <description>Pihole Create a new directory for Pi-Hole and navigate into it.&#xA;mkdir -p /opt/stacks/pihole cd /opt/stacks/pihole nano compose.yml --- name: pihole services: pihole: container_name: pihole image: ghcr.io/pi-hole/pihole:2025.04.0 restart: unless-stopped hostname: ${HOSTNAME} ports: - &amp;#34;53:53/tcp&amp;#34; - &amp;#34;53:53/udp&amp;#34; - &amp;#34;80:80/tcp&amp;#34; - &amp;#34;443:443/tcp&amp;#34; env_file: .env cap_add: - SYS_TIME - SYS_NICE volumes: - &amp;#34;./pihole:/etc/pihole&amp;#34; # This file is used to set environment variables for the Pi-hole Docker container. TZ=&amp;#34;America/Toronto&amp;#34; FTLCONF_dns_listeningMode=&amp;#34;all&amp;#34; FTLCONF_dns_upstreams= &amp;#34;1.1.1.1;127.0.0.1#5053&amp;#34; FTLCONF_webserver_api_password= &amp;#34;your-password-here&amp;#34; </description>
    </item>
    <item>
      <title>Speed Test</title>
      <link>http://localhost:1313/container/docker/speed-test/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:15 +0000</pubDate>
      <guid>http://localhost:1313/container/docker/speed-test/</guid>
      <description>Speed Test </description>
    </item>
    <item>
      <title>Tailscale</title>
      <link>http://localhost:1313/container/docker/tailscale/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:15 +0000</pubDate>
      <guid>http://localhost:1313/container/docker/tailscale/</guid>
      <description>Tailscale Create a new directory for Tailscale and navigate into it.&#xA;mkdir -p /opt/stacks/tailscale cd /opt/stacks/tailscale docker pull ghcr.io/tailscale/tailscale:latest # pre-load the container nano compose.yml --- name: tailscale services: tailscale: container_name: tailscale image: ghcr.io/tailscale/tailscale:v1.82.0 restart: unless-stopped hostname: rpi5-2.local.irishla.io env_file: .env volumes: - &amp;#34;./tailscale/state:/var/lib/tailscale&amp;#34; devices: - /dev/net/tun:/dev/net/tun cap_add: - net_admin nano .env # This file is used to set environment variables for the Tailscale Docker container. TS_AUTHKEY=tskey-client-notAReal-OAuthClientSecret1Atawk TS_EXTRA_ARGS=--advertise-tags=tag:container TS_STATE_DIR=/var/lib/tailscale TS_USERSPACE=false </description>
    </item>
    <item>
      <title>Unbound</title>
      <link>http://localhost:1313/container/docker/unbound/</link>
      <pubDate>Thu, 19 Oct 2017 15:26:15 +0000</pubDate>
      <guid>http://localhost:1313/container/docker/unbound/</guid>
      <description>Unbound Unbound is a private recursive DNS resolver. It can do what Google and the others do, but it is running locally on your LAN (on the Pi-hole host platform in most setups). The only client for your local unbound instance is typically Pi-hole. Run the commands below to install Unbound and access the directory to create the Pi-hole configuration file. I must convert this section to utilize a Docker container.</description>
    </item>
  </channel>
</rss>
